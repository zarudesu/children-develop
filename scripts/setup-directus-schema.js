#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ö–µ–º—ã –¥–∞–Ω–Ω—ã—Ö –≤ Directus –¥–ª—è ChildDev
 * –°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –ø–æ–ª—è –∏ —Ä–æ–ª–∏
 */

const { createDirectus, rest, authentication, readCollections, createCollection, createField, createRole, createPermission } = require('@directus/sdk');

const DIRECTUS_URL = process.env.DIRECTUS_URL || 'http://localhost:8055';
const DIRECTUS_EMAIL = process.env.DIRECTUS_ADMIN_EMAIL || 'admin@childdev.local';
const DIRECTUS_PASSWORD = process.env.DIRECTUS_ADMIN_PASSWORD || 'directus123';

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Directus
const directus = createDirectus(DIRECTUS_URL)
  .with(authentication())
  .with(rest());

async function setupDirectusSchema() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å—Ö–µ–º—ã –¥–∞–Ω–Ω—ã—Ö Directus...');

    // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
    await directus.login(DIRECTUS_EMAIL, DIRECTUS_PASSWORD, {});
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const existingCollections = await directus.request(readCollections());
    const collectionNames = existingCollections.map(c => c.collection);

    // 1. –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
    if (!collectionNames.includes('generators')) {
      console.log('üìä –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é generators...');

      await directus.request(createCollection({
        collection: 'generators',
        meta: {
          collection: 'generators',
          note: '–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
          display_template: '{{name}} ({{type}})',
          hidden: false,
          singleton: false,
          icon: 'functions',
          color: '#6366F1'
        },
        schema: {
          name: 'generators'
        }
      }));

      // –ü–æ–ª—è –¥–ª—è generators
      const generatorFields = [
        {
          field: 'name',
          type: 'string',
          meta: { display: 'formatted-value', readonly: false, hidden: false, width: 'full' },
          schema: { max_length: 255, is_nullable: false }
        },
        {
          field: 'type',
          type: 'string',
          meta: {
            display: 'dropdown',
            options: {
              choices: [
                { text: '–§–∏–ª–≤–æ—Ä–¥', value: 'filword' },
                { text: '–¢–µ–∫—Å—Ç—ã –¥–ª—è —á—Ç–µ–Ω–∏—è', value: 'reading-text' },
                { text: '–ö—Ä–æ—Å—Å–≤–æ—Ä–¥', value: 'crossword' },
                { text: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', value: 'math' },
                { text: '–†–∞—Å–∫—Ä–∞—Å–∫–∞', value: 'coloring' }
              ]
            }
          },
          schema: { max_length: 50, is_nullable: false }
        },
        {
          field: 'description',
          type: 'text',
          meta: { display: 'wysiwyg' }
        },
        {
          field: 'params_schema',
          type: 'json',
          meta: {
            display: 'formatted-json-value',
            note: 'JSON —Å—Ö–µ–º–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞'
          }
        },
        {
          field: 'is_active',
          type: 'boolean',
          meta: { display: 'boolean' },
          schema: { default_value: true }
        },
        {
          field: 'is_premium',
          type: 'boolean',
          meta: { display: 'boolean' },
          schema: { default_value: false }
        },
        {
          field: 'sort_order',
          type: 'integer',
          meta: { display: 'input' },
          schema: { default_value: 1 }
        }
      ];

      for (const field of generatorFields) {
        await directus.request(createField('generators', field));
      }

      console.log('‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è generators —Å–æ–∑–¥–∞–Ω–∞');
    }

    // 2. –†–∞—Å—à–∏—Ä—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é users
    console.log('üë§ –†–∞—Å—à–∏—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

    const userFields = [
      {
        field: 'subscription_type',
        type: 'string',
        meta: {
          display: 'dropdown',
          options: {
            choices: [
              { text: '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è', value: 'free' },
              { text: '–ë–∞–∑–æ–≤–∞—è', value: 'basic' },
              { text: '–ü—Ä–µ–º–∏—É–º', value: 'premium' },
              { text: '–°–µ–º–µ–π–Ω–∞—è', value: 'family' }
            ]
          }
        },
        schema: { max_length: 20, default_value: 'free' }
      },
      {
        field: 'subscription_end_date',
        type: 'dateTime',
        meta: { display: 'datetime' }
      },
      {
        field: 'generations_today',
        type: 'integer',
        meta: { display: 'input', readonly: true },
        schema: { default_value: 0 }
      },
      {
        field: 'last_generation_date',
        type: 'date',
        meta: { display: 'datetime', readonly: true }
      }
    ];

    for (const field of userFields) {
      try {
        await directus.request(createField('directus_users', field));
      } catch (error) {
        if (!error.message.includes('already exists')) {
          throw error;
        }
      }
    }

    // 3. –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    if (!collectionNames.includes('user_generations')) {
      console.log('üìÑ –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é user_generations...');

      await directus.request(createCollection({
        collection: 'user_generations',
        meta: {
          collection: 'user_generations',
          note: '–ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
          display_template: '{{generator.name}} - {{user.first_name}} {{user.last_name}}',
          hidden: false,
          singleton: false,
          icon: 'history',
          color: '#10B981'
        },
        schema: {
          name: 'user_generations'
        }
      }));

      const generationFields = [
        {
          field: 'user_id',
          type: 'uuid',
          meta: {
            display: 'related-values',
            display_options: { template: '{{first_name}} {{last_name}}' }
          },
          schema: { foreign_key_table: 'directus_users', foreign_key_column: 'id' }
        },
        {
          field: 'generator_id',
          type: 'uuid',
          meta: {
            display: 'related-values',
            display_options: { template: '{{name}}' }
          },
          schema: { foreign_key_table: 'generators', foreign_key_column: 'id' }
        },
        {
          field: 'params',
          type: 'json',
          meta: {
            display: 'formatted-json-value',
            note: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'
          }
        },
        {
          field: 'pdf_url',
          type: 'string',
          meta: { display: 'formatted-value' },
          schema: { max_length: 500 }
        },
        {
          field: 'pdf_file',
          type: 'uuid',
          meta: { display: 'file' },
          schema: { foreign_key_table: 'directus_files', foreign_key_column: 'id' }
        },
        {
          field: 'status',
          type: 'string',
          meta: {
            display: 'dropdown',
            options: {
              choices: [
                { text: '–°–æ–∑–¥–∞–µ—Ç—Å—è', value: 'generating' },
                { text: '–ì–æ—Ç–æ–≤–æ', value: 'completed' },
                { text: '–û—à–∏–±–∫–∞', value: 'failed' }
              ]
            }
          },
          schema: { max_length: 20, default_value: 'generating' }
        },
        {
          field: 'download_count',
          type: 'integer',
          meta: { display: 'input' },
          schema: { default_value: 0 }
        },
        {
          field: 'generation_time_ms',
          type: 'integer',
          meta: { display: 'input', note: '–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö' }
        }
      ];

      for (const field of generationFields) {
        await directus.request(createField('user_generations', field));
      }

      console.log('‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è user_generations —Å–æ–∑–¥–∞–Ω–∞');
    }

    // 4. –°–æ–∑–¥–∞–µ–º —Ä–æ–ª–∏
    console.log('üîê –°–æ–∑–¥–∞–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

    const roles = [
      {
        name: 'ChildDev User',
        description: '–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ChildDev —Å –±–∞–∑–æ–≤—ã–º –¥–æ—Å—Ç—É–ø–æ–º',
        icon: 'person',
        admin_access: false,
        app_access: false
      },
      {
        name: 'ChildDev Premium',
        description: '–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º',
        icon: 'star',
        admin_access: false,
        app_access: false
      }
    ];

    for (const role of roles) {
      try {
        await directus.request(createRole(role));
        console.log(`‚úÖ –†–æ–ª—å "${role.name}" —Å–æ–∑–¥–∞–Ω–∞`);
      } catch (error) {
        if (!error.message.includes('already exists')) {
          console.log(`‚ö†Ô∏è –†–æ–ª—å "${role.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }
      }
    }

    // 5. –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('üîß –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã...');

    const testGenerators = [
      {
        name: '–§–∏–ª–≤–æ—Ä–¥',
        type: 'filword',
        description: '–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª–≤–æ—Ä–¥–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–µ—Ç–∫–∏',
        params_schema: {
          words: { type: 'array', required: true },
          gridSize: { type: 'string', enum: ['10x10', '12x12', '14x14', '16x16', '18x18', '20x20'] },
          directions: { type: 'object' },
          textCase: { type: 'string', enum: ['upper', 'lower'] }
        },
        is_active: true,
        is_premium: false,
        sort_order: 1
      },
      {
        name: '–¢–µ–∫—Å—Ç—ã –¥–ª—è —á—Ç–µ–Ω–∏—è',
        type: 'reading-text',
        description: '12 —Ç–∏–ø–æ–≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Ç–µ—Ö–Ω–∏–∫–∏ —á—Ç–µ–Ω–∏—è',
        params_schema: {
          text: { type: 'string', required: true },
          transformType: {
            type: 'string',
            enum: ['normal', 'scrambled-words', 'mirror-text', 'word-ladder', 'missing-vowels', 'syllable-division', 'reading-speed', 'comprehension', 'punctuation', 'intonation', 'expression', 'fluency']
          },
          fontSize: { type: 'string', enum: ['small', 'medium', 'large'] }
        },
        is_active: true,
        is_premium: false,
        sort_order: 2
      },
      {
        name: '–ö—Ä–æ—Å—Å–≤–æ—Ä–¥',
        type: 'crossword',
        description: '–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–æ–≤',
        params_schema: {
          words: { type: 'array', required: true },
          gridSize: { type: 'string' },
          difficulty: { type: 'string', enum: ['easy', 'medium', 'hard'] }
        },
        is_active: true,
        is_premium: true,
        sort_order: 3
      }
    ];

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π SQL –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏, —Ç–∞–∫ –∫–∞–∫ API –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ
    console.log('‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É Directus');

    console.log('\nüéâ –°—Ö–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö Directus —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!');
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –∞–¥–º–∏–Ω–∫—É: http://localhost:8055/admin');
    console.log('2. –í–æ–π–¥–∏—Ç–µ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: admin@childdev.local / directus123');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: generators, user_generations');
    console.log('4. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å—Ö–µ–º—ã:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  setupDirectusSchema();
}

module.exports = { setupDirectusSchema };