'use client'

import { useState, useEffect } from 'react'
import { FilwordParams, PRESET_CATEGORIES, FONT_SIZE_SETTINGS, FontSize } from '../types'
import clsx from 'clsx'

interface ParametersFormProps {
  initialParams: FilwordParams
  onParamsChange: (params: FilwordParams) => void
  onGenerate: (params: FilwordParams) => void
  isLoading: boolean
  error?: string | null
}

const GRID_SIZES = [
  // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã (–ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–µ—Ä–≤—ã–º–∏)
  { value: '10x10' as const, label: '10√ó10', description: '–ü—Ä–æ—Å—Ç–æ–π', cellsCount: 100, estimatedTime: '10-15 —Å–µ–∫' },
  { value: '14x14' as const, label: '14√ó14', description: '–°—Ä–µ–¥–Ω–∏–π', cellsCount: 196, estimatedTime: '15-25 —Å–µ–∫' },
  { value: '18x18' as const, label: '18√ó18', description: '–°–ª–æ–∂–Ω—ã–π', cellsCount: 324, estimatedTime: '25-35 —Å–µ–∫' },
  { value: '24x24' as const, label: '24√ó24', description: '–û—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–π', cellsCount: 576, estimatedTime: '35-45 —Å–µ–∫' },
  // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
  { value: '11x11' as const, label: '11√ó11', description: '–õ–µ–≥–∫–∏–π+', cellsCount: 121, estimatedTime: '11-16 —Å–µ–∫' },
  { value: '12x12' as const, label: '12√ó12', description: '–ü—Ä–æ—Å—Ç–æ–π+', cellsCount: 144, estimatedTime: '12-18 —Å–µ–∫' },
  { value: '13x13' as const, label: '13√ó13', description: '–ü—Ä–æ—Å—Ç–æ–π++', cellsCount: 169, estimatedTime: '13-22 —Å–µ–∫' },
  { value: '15x15' as const, label: '15√ó15', description: '–°—Ä–µ–¥–Ω–∏–π+', cellsCount: 225, estimatedTime: '18-28 —Å–µ–∫' },
  { value: '16x16' as const, label: '16√ó16', description: '–°—Ä–µ–¥–Ω–∏–π++', cellsCount: 256, estimatedTime: '20-30 —Å–µ–∫' },
  { value: '17x17' as const, label: '17√ó17', description: '–°–ª–æ–∂–Ω—ã–π-', cellsCount: 289, estimatedTime: '22-32 —Å–µ–∫' },
  { value: '19x19' as const, label: '19√ó19', description: '–°–ª–æ–∂–Ω—ã–π+', cellsCount: 361, estimatedTime: '27-38 —Å–µ–∫' },
  { value: '20x20' as const, label: '20√ó20', description: '–°–ª–æ–∂–Ω—ã–π++', cellsCount: 400, estimatedTime: '30-40 —Å–µ–∫' },
  { value: '21x21' as const, label: '21√ó21', description: '–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π-', cellsCount: 441, estimatedTime: '32-42 —Å–µ–∫' },
  { value: '22x22' as const, label: '22√ó22', description: '–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π', cellsCount: 484, estimatedTime: '35-45 —Å–µ–∫' },
  { value: '23x23' as const, label: '23√ó23', description: '–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π+', cellsCount: 529, estimatedTime: '37-47 —Å–µ–∫' },
  { value: '25x25' as const, label: '25√ó25', description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π', cellsCount: 625, estimatedTime: '42-60 —Å–µ–∫' },
]

const DIRECTIONS = [
  { key: 'right' as const, label: '–í–ø—Ä–∞–≤–æ', icon: '‚Üí', description: '–°–ª–æ–≤–∞ —á–∏—Ç–∞—é—Ç—Å—è —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ' },
  { key: 'left' as const, label: '–í–ª–µ–≤–æ', icon: '‚Üê', description: '–°–ª–æ–≤–∞ —á–∏—Ç–∞—é—Ç—Å—è —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ' },
  { key: 'down' as const, label: '–í–Ω–∏–∑', icon: '‚Üì', description: '–°–ª–æ–≤–∞ —á–∏—Ç–∞—é—Ç—Å—è —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑' },
  { key: 'up' as const, label: '–í–≤–µ—Ä—Ö', icon: '‚Üë', description: '–°–ª–æ–≤–∞ —á–∏—Ç–∞—é—Ç—Å—è —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö' },
]

const TEXT_CASES = [
  { key: 'upper' as const, label: '–ó–ê–ì–õ–ê–í–ù–´–ï', example: '–ö–û–¢', description: '–í—Å–µ –±—É–∫–≤—ã –∑–∞–≥–ª–∞–≤–Ω—ã–µ' },
  { key: 'lower' as const, label: '—Å—Ç—Ä–æ—á–Ω—ã–µ', example: '–∫–æ—Ç', description: '–í—Å–µ –±—É–∫–≤—ã —Å—Ç—Ä–æ—á–Ω—ã–µ' },
  { key: 'mixed' as const, label: '–°–º–µ—à–∞–Ω–Ω—ã–π', example: '–ö–æ—Ç', description: '–ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è' },
]

export default function ParametersForm({ 
  initialParams, 
  onParamsChange,
  onGenerate, 
  isLoading,
  error
}: ParametersFormProps) {
  const [params, setParams] = useState<FilwordParams>(initialParams)
  const [wordInput, setWordInput] = useState('')
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null)
  const [expandedSection, setExpandedSection] = useState<string | null>(null)

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
  useEffect(() => {
    setParams(initialParams)
  }, [initialParams])

  const handleGridSizeChange = (size: FilwordParams['gridSize']) => {
    const newParams = { ...params, gridSize: size }
    setParams(newParams)
    onParamsChange(newParams)
  }

  const handleDirectionChange = (direction: keyof FilwordParams['directions']) => {
    const newParams = {
      ...params,
      directions: {
        ...params.directions,
        [direction]: !params.directions[direction]
      }
    }
    setParams(newParams)
    onParamsChange(newParams)
  }

  const handleTextCaseChange = (textCase: FilwordParams['textCase']) => {
    const newParams = { ...params, textCase }
    setParams(newParams)
    onParamsChange(newParams)
  }

  const handleFontSizeChange = (fontSize: FontSize) => {
    const newParams = { ...params, fontSize }
    setParams(newParams)
    onParamsChange(newParams)
  }

  const handleWordsFromInput = () => {
    const words = wordInput
      .split(/[,\n]/)
      .map(word => word.trim().toLowerCase())
      .filter(word => word.length >= 3 && word.length <= 12)
      .filter(word => /^[–∞-—è—ë]+$/i.test(word))
    
    if (words.length > 0) {
      const newParams = { ...params, words }
      setParams(newParams)
      onParamsChange(newParams)
      setSelectedCategory(null)
    }
  }

  const handleCategorySelect = (categoryKey: string) => {
    const category = PRESET_CATEGORIES[categoryKey]
    if (category) {
      const newParams = { ...params, words: category.words }
      setParams(newParams)
      onParamsChange(newParams)
      setSelectedCategory(categoryKey)
      setWordInput('')
    }
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    onGenerate(params)
  }

  const isAtLeastOneDirection = Object.values(params.directions).some(Boolean)
  const selectedGridSize = GRID_SIZES.find(g => g.value === params.gridSize)
  const enabledDirectionsCount = Object.values(params.directions).filter(Boolean).length

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
      <div className="card">
        <div className="flex items-center gap-3 mb-4">
          <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
            <span className="text-white text-lg font-bold">‚äû</span>
          </div>
          <div>
            <h2 className="text-xl font-semibold text-gray-900">
              –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª–≤–æ—Ä–¥–∞
            </h2>
            <p className="text-sm text-gray-600">
              –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤ –≤ –±—É–∫–≤–µ–Ω–Ω–æ–π —Å–µ—Ç–∫–µ
            </p>
          </div>
        </div>

        {/* –ë—ã—Å—Ç—Ä–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="grid grid-cols-2 gap-4 p-3 bg-gray-50 rounded-lg">
          <div className="text-center">
            <p className="text-lg font-semibold text-gray-900">{params.words.length}</p>
            <p className="text-xs text-gray-600">—Å–ª–æ–≤ –≤—ã–±—Ä–∞–Ω–æ</p>
          </div>
          <div className="text-center">
            <p className="text-lg font-semibold text-gray-900">
              {selectedGridSize?.cellsCount || 0}
            </p>
            <p className="text-xs text-gray-600">—è—á–µ–µ–∫ –≤ —Å–µ—Ç–∫–µ</p>
          </div>
        </div>
      </div>

      <form onSubmit={handleSubmit} className="space-y-4">
        {/* –†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏ */}
        <div className="card">
          <div className="flex items-center gap-2 mb-3">
            <span className="text-lg">üìè</span>
            <h3 className="text-lg font-medium text-gray-900">–†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏</h3>
          </div>
          
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
            {GRID_SIZES.slice(0, 4).map((size) => (
              <button
                key={size.value}
                type="button"
                onClick={() => handleGridSizeChange(size.value)}
                className={clsx(
                  'p-3 text-left rounded-lg border-2 transition-all hover:shadow-sm',
                  params.gridSize === size.value
                    ? 'border-blue-500 bg-blue-50 shadow-sm'
                    : 'border-gray-200 bg-white hover:border-gray-300'
                )}
              >
                <div className="flex justify-between items-start">
                  <div>
                    <span className="font-semibold text-gray-900">{size.label}</span>
                    <p className="text-sm text-gray-600">{size.description}</p>
                    <p className="text-xs text-gray-500 mt-1">
                      {size.cellsCount} —è—á–µ–µ–∫ ‚Ä¢ ~{size.value === '10x10' ? '10-15' : size.value === '14x14' ? '15-25' : size.value === '18x18' ? '25-35' : '35-45'} —Å–µ–∫
                    </p>
                  </div>
                  {params.gridSize === size.value && (
                    <span className="text-blue-500 text-lg">‚úì</span>
                  )}
                </div>
              </button>
            ))}
          </div>
        </div>

        {/* –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ */}
        <div className="card">
          <div className="flex items-center gap-2 mb-3">
            <span className="text-lg">üî§</span>
            <h3 className="text-lg font-medium text-gray-900">–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞</h3>
          </div>
          
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
            {Object.entries(FONT_SIZE_SETTINGS).map(([key, fontSetting]) => (
              <button
                key={key}
                type="button"
                onClick={() => handleFontSizeChange(key as FontSize)}
                className={clsx(
                  'p-4 text-center rounded-lg border-2 transition-all hover:shadow-sm',
                  params.fontSize === key
                    ? 'border-blue-500 bg-blue-50'
                    : 'border-gray-200 bg-white hover:border-gray-300'
                )}
              >
                <div className="space-y-3">
                  <span className="font-medium text-gray-900 block text-sm">{fontSetting.name}</span>
                  
                  {/* –ü—Ä–∏–º–µ—Ä —Å —Å–µ—Ç–∫–æ–π –±—É–∫–≤ */}
                  <div className="bg-gray-100 rounded p-2 inline-block">
                    <div className="grid grid-cols-3 gap-1">
                      {['–ö', '–û', '–¢', '–°', '–û', '–ù', '–´', '–†', '–ê'].map((letter, index) => (
                        <div 
                          key={index}
                          className="w-6 h-6 border border-gray-300 flex items-center justify-center bg-white font-bold"
                          style={{ fontSize: `${Math.max(10, fontSetting.baseFontSize - 6)}px` }}
                        >
                          {letter}
                        </div>
                      ))}
                    </div>
                  </div>
                  
                  <p className="text-xs text-gray-600">{fontSetting.description}</p>
                  {params.fontSize === key && (
                    <span className="text-blue-500 text-sm">‚úì</span>
                  )}
                </div>
              </button>
            ))}
          </div>
        </div>

        {/* –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="card">
          <div className="flex items-center gap-2 mb-3">
            <span className="text-lg">üß≠</span>
            <h3 className="text-lg font-medium text-gray-900">–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤</h3>
            <span className="text-sm text-gray-600">({enabledDirectionsCount} –∏–∑ 4)</span>
          </div>
          
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
            {DIRECTIONS.map(({ key, label, icon, description }) => (
              <label
                key={key}
                className={clsx(
                  'flex items-center p-3 rounded-lg border-2 cursor-pointer transition-all hover:shadow-sm',
                  params.directions[key]
                    ? 'border-blue-500 bg-blue-50'
                    : 'border-gray-200 bg-white hover:border-gray-300'
                )}
              >
                <input
                  type="checkbox"
                  checked={params.directions[key]}
                  onChange={() => handleDirectionChange(key)}
                  className="sr-only"
                />
                <div className="flex items-center gap-3 flex-1">
                  <span className="text-xl">{icon}</span>
                  <div>
                    <span className="font-medium text-gray-900">{label}</span>
                    <p className="text-xs text-gray-600">{description}</p>
                  </div>
                </div>
                {params.directions[key] && (
                  <span className="text-blue-500 text-lg">‚úì</span>
                )}
              </label>
            ))}
          </div>
          
          {!isAtLeastOneDirection && (
            <div className="mt-3 p-3 bg-red-50 border border-red-200 rounded-lg">
              <p className="text-red-700 text-sm flex items-center gap-2">
                <span>‚ö†Ô∏è</span>
                –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å–ª–æ–≤
              </p>
            </div>
          )}
        </div>

        {/* –†–µ–≥–∏—Å—Ç—Ä —Ç–µ–∫—Å—Ç–∞ */}
        <div className="card">
          <div className="flex items-center gap-2 mb-3">
            <span className="text-lg">üî§</span>
            <h3 className="text-lg font-medium text-gray-900">–§–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞</h3>
          </div>
          
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
            {TEXT_CASES.map(({ key, label, example, description }) => (
              <button
                key={key}
                type="button"
                onClick={() => handleTextCaseChange(key)}
                className={clsx(
                  'p-3 text-center rounded-lg border-2 transition-all hover:shadow-sm',
                  params.textCase === key
                    ? 'border-blue-500 bg-blue-50'
                    : 'border-gray-200 bg-white hover:border-gray-300'
                )}
              >
                <div className="space-y-1">
                  <span className="font-medium text-gray-900 block text-sm">{label}</span>
                  <span className="text-base font-mono bg-gray-100 px-2 py-1 rounded block">
                    {example}
                  </span>
                  <p className="text-xs text-gray-600">{description}</p>
                  {params.textCase === key && (
                    <span className="text-blue-500 text-sm">‚úì</span>
                  )}
                </div>
              </button>
            ))}
          </div>
        </div>
        {/* –í—ã–±–æ—Ä —Å–ª–æ–≤ */}
        <div className="card">
          <div className="flex items-center gap-2 mb-3">
            <span className="text-lg">üìù</span>
            <h3 className="text-lg font-medium text-gray-900">–°–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞</h3>
          </div>
          
          {/* –ì–æ—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
          <div className="mb-4">
            <div className="flex items-center gap-2 mb-2">
              <span className="text-sm font-medium text-gray-700">–ì–æ—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</span>
              <button
                type="button"
                onClick={() => setExpandedSection(expandedSection === 'categories' ? null : 'categories')}
                className="text-xs text-blue-600 hover:text-blue-800"
              >
                {expandedSection === 'categories' ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ'}
              </button>
            </div>
            
            <div className={clsx(
              'grid gap-2 transition-all duration-300',
              expandedSection === 'categories' 
                ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3' 
                : 'grid-cols-1 sm:grid-cols-2'
            )}>
              {Object.entries(PRESET_CATEGORIES)
                .slice(0, expandedSection === 'categories' ? undefined : 6)
                .map(([key, category]) => (
                <button
                  key={key}
                  type="button"
                  onClick={() => handleCategorySelect(key)}
                  className={clsx(
                    'p-2 text-left rounded-lg border-2 transition-all hover:shadow-sm',
                    selectedCategory === key
                      ? 'border-green-500 bg-green-50'
                      : 'border-gray-200 bg-white hover:border-gray-300'
                  )}
                >
                  <div className="flex justify-between items-center">
                    <div>
                      <span className="font-medium text-gray-900 text-sm">{category.name}</span>
                      <p className="text-xs text-gray-600">{category.words.length} —Å–ª–æ–≤</p>
                    </div>
                    {selectedCategory === key && (
                      <span className="text-green-500 text-sm">‚úì</span>
                    )}
                  </div>
                </button>
              ))}
            </div>
          </div>

          {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å */}
          <div className="relative my-4">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-gray-300" />
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="px-2 bg-white text-gray-500">–∏–ª–∏</span>
            </div>
          </div>

          {/* –°–≤–æ–∏ —Å–ª–æ–≤–∞ */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ —Å–ª–æ–≤–∞:
            </label>
            <div className="relative">
              <textarea
                value={wordInput}
                onChange={(e) => setWordInput(e.target.value)}
                placeholder="–∫–æ—Ç, —Å–æ–±–∞–∫–∞, –∫–æ—Ä–æ–≤–∞&#10;–ø—Ç–∏—Ü–∞, —Ä—ã–±–∞, –∑–∞—è—Ü&#10;–∏–ª–∏ –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏..."
                rows={3}
                className="input text-sm resize-none"
                onBlur={handleWordsFromInput}
              />
              <div className="absolute top-1 right-2 text-xs text-gray-400">
                {wordInput.split(/[,\n]/).filter(w => w.trim()).length} —Å–ª–æ–≤
              </div>
            </div>
            <div className="mt-1 text-xs text-gray-500 space-y-0.5">
              <p>‚Ä¢ –°–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏</p>
              <p>‚Ä¢ –¢–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ (—Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã)</p>
              <p>‚Ä¢ –î–ª–∏–Ω–∞ —Å–ª–æ–≤–∞: –æ—Ç 3 –¥–æ 12 —Å–∏–º–≤–æ–ª–æ–≤</p>
            </div>
          </div>
        </div>

        {/* –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ */}
        {params.words.length > 0 && (
          <div className="card border-green-200 bg-green-50">
            <div className="flex items-start gap-3">
              <span className="text-green-600 text-lg mt-1">‚úì</span>
              <div className="flex-1">
                <p className="text-sm font-medium text-green-800 mb-2">
                  –í—ã–±—Ä–∞–Ω–æ —Å–ª–æ–≤: {params.words.length}
                </p>
                <div className="bg-white/70 p-2 rounded-lg">
                  <div className="flex flex-wrap gap-1">
                    {params.words.slice(0, 20).map((word, index) => (
                      <span
                        key={index}
                        className="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full border border-green-300"
                      >
                        {word}
                      </span>
                    ))}
                    {params.words.length > 20 && (
                      <span className="px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full">
                        +{params.words.length - 20} –µ—â–µ
                      </span>
                    )}
                  </div>
                </div>
                {selectedCategory && (
                  <p className="text-xs text-green-700 mt-1">
                    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {PRESET_CATEGORIES[selectedCategory]?.name}
                  </p>
                )}
              </div>
            </div>
          </div>
        )}

        {/* –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –∫–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
        <div className="card bg-gradient-to-r from-gray-50 to-blue-50 border-gray-200">
          <div className="space-y-3">
            {/* –°–≤–æ–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
            <div className="grid grid-cols-2 sm:grid-cols-5 gap-3 text-center">
              <div>
                <p className="text-xs text-gray-600">–†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏</p>
                <p className="font-semibold text-gray-900">{params.gridSize}</p>
              </div>
              <div>
                <p className="text-xs text-gray-600">–°–ª–æ–≤</p>
                <p className="font-semibold text-gray-900">{params.words.length}</p>
              </div>
              <div>
                <p className="text-xs text-gray-600">–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è</p>
                <p className="font-semibold text-gray-900">{enabledDirectionsCount}/4</p>
              </div>
              <div>
                <p className="text-xs text-gray-600">–†–µ–≥–∏—Å—Ç—Ä</p>
                <p className="font-semibold text-gray-900">
                  {TEXT_CASES.find(tc => tc.key === params.textCase)?.example}
                </p>
              </div>
              <div>
                <p className="text-xs text-gray-600">–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞</p>
                <p className="font-semibold text-gray-900">
                  {FONT_SIZE_SETTINGS[params.fontSize].name}
                </p>
              </div>
            </div>

            {/* –ü—Ä–æ–≥–Ω–æ–∑ –≤—Ä–µ–º–µ–Ω–∏ */}
            {params.words.length > 0 && selectedGridSize && (
              <div className="text-center p-2 bg-white/50 rounded-lg">
                <p className="text-xs text-gray-600">
                  ‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: <span className="font-semibold">{selectedGridSize.estimatedTime}</span>
                </p>
              </div>
            )}

            {/* –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
            <button
              type="submit"
              disabled={
                isLoading || 
                params.words.length === 0 || 
                !isAtLeastOneDirection
              }
              className={clsx(
                'w-full py-3 px-6 rounded-lg font-semibold text-base transition-all transform',
                'focus:outline-none focus:ring-4 focus:ring-offset-2',
                isLoading || params.words.length === 0 || !isAtLeastOneDirection
                  ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                  : 'bg-gradient-to-r from-blue-600 to-purple-600 text-white hover:from-blue-700 hover:to-purple-700 focus:ring-blue-500 hover:scale-[1.02] shadow-lg'
              )}
            >
              {isLoading ? (
                <span className="flex items-center justify-center">
                  <svg 
                    className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" 
                    xmlns="http://www.w3.org/2000/svg" 
                    fill="none" 
                    viewBox="0 0 24 24"
                  >
                    <circle 
                      className="opacity-25" 
                      cx="12" 
                      cy="12" 
                      r="10" 
                      stroke="currentColor" 
                      strokeWidth="4"
                    />
                    <path 
                      className="opacity-75" 
                      fill="currentColor" 
                      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                    />
                  </svg>
                  –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–∏–ª–≤–æ—Ä–¥...
                </span>
              ) : (
                <span className="flex items-center justify-center">
                  <span className="mr-2 text-lg">üéØ</span>
                  –°–æ–∑–¥–∞—Ç—å —Ñ–∏–ª–≤–æ—Ä–¥
                </span>
              )}
            </button>
            
            {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –æ—à–∏–±–∫–∏ */}
            <div className="space-y-1">
              {error && (
                <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
                  <p className="text-sm text-red-700 text-center">
                    <span className="mr-2">‚ùå</span>
                    {error}
                  </p>
                </div>
              )}
              {params.words.length === 0 && !error && (
                <p className="text-xs text-gray-600 text-center">
                  üí° –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ª–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏
                </p>
              )}
              {!isAtLeastOneDirection && !error && (
                <p className="text-xs text-red-600 text-center">
                  ‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å–ª–æ–≤
                </p>
              )}
              {params.words.length > 0 && isAtLeastOneDirection && !isLoading && !error && (
                <p className="text-xs text-green-600 text-center">
                  ‚úÖ –í—Å–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–ª–≤–æ—Ä–¥–∞
                </p>
              )}
            </div>
          </div>
        </div>
      </form>
    </div>
  )
}
