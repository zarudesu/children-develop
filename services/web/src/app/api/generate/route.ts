import { NextRequest, NextResponse } from 'next/server'
import { validateFilwordParams } from '../../filword/utils/validation'
import { validateReadingTextParams } from '../../reading-text/utils/validation'
import { validateCrosswordParams } from '../../crossword/utils/validation'
import { generateReadingTextHTML } from '../../reading-text/utils/htmlGenerator'
import { generateCrosswordHTML } from '../../crossword/utils/htmlGenerator'
import { FilwordParams } from '../../filword/types'
import { ReadingTextParams } from '../../reading-text/types'
import { CrosswordParams } from '../../crossword/types'

type GenerateRequest =
  | { type: 'filword', params: FilwordParams }
  | { type: 'reading-text', params: ReadingTextParams }
  | { type: 'crossword', params: CrosswordParams }
  | FilwordParams // –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å

export async function POST(request: NextRequest) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º URL PDF —Å–µ—Ä–≤–∏—Å–∞ –≤ runtime, –∞ –Ω–µ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ
    const PDF_SERVICE_URL = process.env.PDF_SERVICE_URL || 'http://127.0.0.1:3001'
    console.log('PDF_SERVICE_URL:', PDF_SERVICE_URL)

    // –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞
    const body = await request.json() as GenerateRequest

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º
    let validationResult: { success: boolean; error?: string }

    if ('type' in body && body.type === 'reading-text') {
      // –ù–æ–≤—ã–π API –¥–ª—è reading-text
      const validationData = validateReadingTextParams(body.params)
      validationResult = validationData.success
        ? { success: true }
        : { success: false, error: validationData.errors?.join(', ') || '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏' }
    } else if ('type' in body && body.type === 'crossword') {
      // –ù–æ–≤—ã–π API –¥–ª—è crossword
      const validationData = validateCrosswordParams(body.params)
      validationResult = validationData.success
        ? { success: true }
        : { success: false, error: validationData.errors?.join(', ') || '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏' }
    } else if ('type' in body && body.type === 'filword') {
      // –ù–æ–≤—ã–π API –¥–ª—è filword
      validationResult = validateFilwordParams(body.params)
    } else {
      // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ filword
      validationResult = validateFilwordParams(body as FilwordParams)
    }

    if (!validationResult.success) {
      return NextResponse.json(
        { message: validationResult.error },
        { status: 400 }
      )
    }

    // –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML —Å–Ω–∞—á–∞–ª–∞, –ø–æ—Ç–æ–º PDF
    if ('type' in body && body.type === 'reading-text') {
      // –î–ª—è reading-text –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É HTML->PDF

      // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –≤ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–µ (–æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã!)
      const html = generateReadingTextHTML(body.params as ReadingTextParams)

      // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML –≤ –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
      const pdfResponse = await fetch(`${PDF_SERVICE_URL}/generate-from-html`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ html }),
      })

      if (!pdfResponse.ok) {
        const errorText = await pdfResponse.text()
        console.error('PDF from HTML error:', errorText)
        return NextResponse.json(
          { message: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –∏–∑ HTML' },
          { status: pdfResponse.status }
        )
      }

      // –ü–æ–ª—É—á–∞–µ–º PDF –∫–∞–∫ stream
      const pdfBuffer = await pdfResponse.arrayBuffer()

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
      const params = body.params as ReadingTextParams
      const filename = `reading-text-${params.textType}-${Date.now()}.pdf`

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (—Å–µ—Ä–≤–µ—Ä–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ - –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å)
      console.log('üìä Download recorded:', {
        type: 'reading-text',
        textType: params.textType,
        timestamp: new Date().toISOString(),
        userAgent: request.headers.get('user-agent')?.substring(0, 50)
      })

      return new NextResponse(pdfBuffer, {
        status: 200,
        headers: {
          'Content-Type': 'application/pdf',
          'Content-Disposition': `attachment; filename*=UTF-8''${encodeURIComponent(filename)}`,
          'Cache-Control': 'no-cache',
          'X-Download-Type': 'reading-text', // –î–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
          'X-Download-Metadata': JSON.stringify({ textType: params.textType }),
        },
      })

    } else if ('type' in body && body.type === 'crossword') {
      // –î–ª—è crossword –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É HTML->PDF

      try {
        console.log('üéØ Crossword generation started')

        // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –≤ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–µ (–æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã!)
        const html = await generateCrosswordHTML(body.params as CrosswordParams)

        console.log('‚úÖ HTML generated, length:', html.length)

      // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML –≤ –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
      const pdfResponse = await fetch(`${PDF_SERVICE_URL}/generate-from-html`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ html }),
      })

      if (!pdfResponse.ok) {
        const errorText = await pdfResponse.text()
        console.error('PDF from HTML error:', errorText)
        return NextResponse.json(
          { message: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–∞ –∏–∑ HTML' },
          { status: pdfResponse.status }
        )
      }

      // –ü–æ–ª—É—á–∞–µ–º PDF –∫–∞–∫ stream
      const pdfBuffer = await pdfResponse.arrayBuffer()

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è crossword
      const params = body.params as CrosswordParams
      const filename = `crossword-${params.gridSize}-${Date.now()}.pdf`

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (—Å–µ—Ä–≤–µ—Ä–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ - –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å)
      console.log('üìä Download recorded:', {
        type: 'crossword',
        gridSize: params.gridSize,
        wordsCount: params.words.length,
        timestamp: new Date().toISOString(),
        userAgent: request.headers.get('user-agent')?.substring(0, 50)
      })

      return new NextResponse(pdfBuffer, {
        status: 200,
        headers: {
          'Content-Type': 'application/pdf',
          'Content-Disposition': `attachment; filename*=UTF-8''${encodeURIComponent(filename)}`,
          'Cache-Control': 'no-cache',
          'X-Download-Type': 'crossword', // –î–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
          'X-Download-Metadata': JSON.stringify({ gridSize: params.gridSize, wordsCount: params.words.length }),
        },
      })

      } catch (error) {
        console.error('‚ùå Crossword error:', error)
        return NextResponse.json(
          { message: `–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–∞: ${error.message}` },
          { status: 500 }
        )
      }

    } else {
      // –î–ª—è filword –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
      // –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ PDF —Å–µ—Ä–≤–∏—Å—É
      const pdfResponse = await fetch(`${PDF_SERVICE_URL}/generate`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(body),
      })

      if (!pdfResponse.ok) {
        const errorText = await pdfResponse.text()
        console.error('PDF Service error:', errorText)

        return NextResponse.json(
          {
            message: pdfResponse.status === 422
              ? '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ –≤ —Å–µ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏.'
              : '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
          },
          { status: pdfResponse.status }
        )
      }

      // –ü–æ–ª—É—á–∞–µ–º PDF –∫–∞–∫ stream
      const pdfBuffer = await pdfResponse.arrayBuffer()

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è filword
      const params = 'params' in body ? body.params as FilwordParams : body as FilwordParams
      const filename = `filword-${params.gridSize}-${params.fontSize}-${params.words.length}words-${Date.now()}.pdf`

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (—Å–µ—Ä–≤–µ—Ä–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ - –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å)
      console.log('üìä Download recorded:', {
        type: 'filword',
        gridSize: params.gridSize,
        wordsCount: params.words.length,
        timestamp: new Date().toISOString(),
        userAgent: request.headers.get('user-agent')?.substring(0, 50)
      })

      return new NextResponse(pdfBuffer, {
        status: 200,
        headers: {
          'Content-Type': 'application/pdf',
          'Content-Disposition': `attachment; filename*=UTF-8''${encodeURIComponent(filename)}`,
          'Cache-Control': 'no-cache',
          'X-Download-Type': 'filword', // –î–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
          'X-Download-Metadata': JSON.stringify({ gridSize: params.gridSize, wordsCount: params.words.length }),
        },
      })
    }

  } catch (error) {
    console.error('API error:', error)
    
    return NextResponse.json(
      { message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}// Force rebuild Mon Aug 25 21:32:12 -03 2025
