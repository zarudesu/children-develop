'use client'

import React, { useState } from 'react'
import {
  CrosswordParams,
  CrosswordSize,
  CrosswordDifficulty,
  CrosswordStyle,
  CrosswordWord,
  CROSSWORD_GRID_SIZES,
  CROSSWORD_DIFFICULTY_SETTINGS,
  CROSSWORD_STYLES,
  CROSSWORD_PRESET_CATEGORIES,
  CrosswordPresetCategory
} from '../types'

interface CrosswordGeneratorProps {
  onGenerate?: (params: CrosswordParams) => void
  loading?: boolean
}

export default function CrosswordGenerator({
  onGenerate,
  loading = false
}: CrosswordGeneratorProps) {
  const [params, setParams] = useState<CrosswordParams>({
    words: [],
    gridSize: '15x15',
    difficulty: 'medium',
    style: 'classic',
    fontSize: 'medium',
    includeAnswers: true,
    showNumbers: true,
    blackSquareRatio: 0.12
  })

  const [selectedCategory, setSelectedCategory] = useState<CrosswordPresetCategory | null>(null)
  const [customWords, setCustomWords] = useState('')
  const [wordInputError, setWordInputError] = useState<string | null>(null)
  const [showPreview, setShowPreview] = useState(false)
  const [previewHtml, setPreviewHtml] = useState<string | null>(null)
  const [previewLoading, setPreviewLoading] = useState(false)

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const handleParamChange = <K extends keyof CrosswordParams>(
    key: K,
    value: CrosswordParams[K]
  ) => {
    setParams(prev => ({ ...prev, [key]: value }))
  }

  // –í—ã–±–æ—Ä –≥–æ—Ç–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const handleCategorySelect = (category: CrosswordPresetCategory) => {
    setSelectedCategory(category)
    setCustomWords('')
    setWordInputError(null)
    const categoryWords = CROSSWORD_PRESET_CATEGORIES[category].words
    setParams(prev => ({ ...prev, words: categoryWords }))
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ —Å–ª–æ–≤
  const handleCustomWordsChange = (input: string) => {
    setCustomWords(input)
    setWordInputError(null)

    if (input.trim()) {
      setSelectedCategory(null)

      try {
        const parsed = parseCustomWords(input)
        setParams(prev => ({ ...prev, words: parsed }))
      } catch (error) {
        setWordInputError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —Å–ª–æ–≤')
        setParams(prev => ({ ...prev, words: [] }))
      }
    } else {
      setParams(prev => ({ ...prev, words: [] }))
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ —Å–ª–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º–∏
  const parseCustomWords = (input: string): CrosswordWord[] => {
    const lines = input.split('\n').filter(line => line.trim())
    const words: CrosswordWord[] = []

    for (const line of lines) {
      const trimmed = line.trim()

      // –§–æ—Ä–º–∞—Ç: "—Å–ª–æ–≤–æ - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ" –∏–ª–∏ "—Å–ª–æ–≤–æ: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"
      const match = trimmed.match(/^([–∞-—è—ë]+)\s*[-:]\s*(.+)$/i)

      if (match) {
        const [, word, clue] = match
        const cleanWord = word.toLowerCase().trim()
        const cleanClue = clue.trim()

        if (cleanWord.length < 3) {
          throw new Error(`–°–ª–æ–≤–æ "${cleanWord}" —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 3 –±—É–∫–≤—ã)`)
        }

        if (cleanWord.length > 15) {
          throw new Error(`–°–ª–æ–≤–æ "${cleanWord}" —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 15 –±—É–∫–≤)`)
        }

        if (cleanClue.length < 3) {
          throw new Error(`–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è "${cleanWord}" —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ`)
        }

        words.push({
          word: cleanWord,
          clue: cleanClue,
          answer: cleanWord,
          length: cleanWord.length
        })
      } else {
        throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: "${trimmed}". –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Å–ª–æ–≤–æ - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ`)
      }
    }

    if (words.length === 0) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–ª–æ–≤')
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏
    const uniqueWords = new Set(words.map(w => w.word))
    if (uniqueWords.size < words.length) {
      throw new Error('–ù–∞–π–¥–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞')
    }

    return words
  }

  // HTML –ø—Ä–µ–≤—å—é
  const handlePreview = async () => {
    if (params.words.length === 0) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ª–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ —Å–ª–æ–≤–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º–∏')
      return
    }

    if (params.words.length < 5) {
      alert('–ú–∏–Ω–∏–º—É–º 5 —Å–ª–æ–≤ –Ω—É–∂–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–∞')
      return
    }

    setPreviewLoading(true)
    try {
      const response = await fetch('/api/debug-html', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: 'crossword',
          params
        })
      })

      if (!response.ok) {
        const error = await response.json()
        throw new Error(error.message || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é')
      }

      const html = await response.text()
      setPreviewHtml(html)
      setShowPreview(true)
    } catch (error) {
      console.error('Preview error:', error)
      alert(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é')
    } finally {
      setPreviewLoading(false)
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–∞
  const handleGenerate = () => {
    if (params.words.length === 0) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ª–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ —Å–ª–æ–≤–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º–∏')
      return
    }

    if (params.words.length < 5) {
      alert('–ú–∏–Ω–∏–º—É–º 5 —Å–ª–æ–≤ –Ω—É–∂–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–∞')
      return
    }

    const maxWords = CROSSWORD_DIFFICULTY_SETTINGS[params.difficulty].maxWords
    if (params.words.length > maxWords) {
      alert(`–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–ª–æ–≤ –¥–ª—è —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ "${CROSSWORD_DIFFICULTY_SETTINGS[params.difficulty].name}". –ú–∞–∫—Å–∏–º—É–º: ${maxWords}`)
      return
    }

    if (onGenerate) {
      onGenerate(params)
    }
  }

  const canGenerate = params.words.length >= 5 && !loading && !wordInputError

  return (
    <div className="max-w-4xl mx-auto space-y-8">
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <div className="space-y-6">
          {/* –†–∞–∑–º–µ—Ä –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å */}
          <div className="bg-white rounded-lg shadow-sm border p-6">
            <div className="flex items-center gap-2 mb-4">
              <span className="text-xl">üéØ</span>
              <h3 className="text-lg font-medium text-gray-900">–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
            </div>

            {/* –†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏ */}
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏
              </label>
              <div className="grid grid-cols-3 gap-2">
                {Object.entries(CROSSWORD_GRID_SIZES).map(([size, num]) => (
                  <button
                    key={size}
                    type="button"
                    onClick={() => handleParamChange('gridSize', size as CrosswordSize)}
                    className={`p-2 text-center rounded-lg border-2 transition-all text-sm ${
                      params.gridSize === size
                        ? 'border-green-500 bg-green-50 text-green-700'
                        : 'border-gray-200 bg-white hover:border-gray-300'
                    }`}
                  >
                    <div className="font-semibold">{size}</div>
                    <div className="text-xs text-gray-600">{num}√ó{num}</div>
                  </button>
                ))}
              </div>
            </div>

            {/* –°–ª–æ–∂–Ω–æ—Å—Ç—å */}
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
              </label>
              <div className="space-y-2">
                {Object.entries(CROSSWORD_DIFFICULTY_SETTINGS).map(([key, settings]) => (
                  <button
                    key={key}
                    type="button"
                    onClick={() => handleParamChange('difficulty', key as CrosswordDifficulty)}
                    className={`w-full p-3 text-left rounded-lg border-2 transition-all ${
                      params.difficulty === key
                        ? 'border-green-500 bg-green-50'
                        : 'border-gray-200 bg-white hover:border-gray-300'
                    }`}
                  >
                    <div className="flex justify-between items-center">
                      <div>
                        <div className="font-medium">{settings.name}</div>
                        <div className="text-sm text-gray-600">{settings.description}</div>
                      </div>
                      {params.difficulty === key && (
                        <span className="text-green-500 text-lg">‚úì</span>
                      )}
                    </div>
                  </button>
                ))}
              </div>
            </div>

            {/* –°—Ç–∏–ª—å –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–∞ */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –°—Ç–∏–ª—å –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–∞
              </label>
              <div className="space-y-2">
                {Object.entries(CROSSWORD_STYLES).map(([key, style]) => (
                  <button
                    key={key}
                    type="button"
                    onClick={() => handleParamChange('style', key as CrosswordStyle)}
                    className={`w-full p-3 text-left rounded-lg border-2 transition-all ${
                      params.style === key
                        ? 'border-green-500 bg-green-50'
                        : 'border-gray-200 bg-white hover:border-gray-300'
                    }`}
                  >
                    <div className="flex justify-between items-center">
                      <div>
                        <div className="font-medium">{style.name}</div>
                        <div className="text-sm text-gray-600">{style.description}</div>
                      </div>
                      {params.style === key && (
                        <span className="text-green-500 text-lg">‚úì</span>
                      )}
                    </div>
                  </button>
                ))}
              </div>
            </div>
          </div>

          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
          <div className="bg-white rounded-lg shadow-sm border p-6">
            <div className="flex items-center gap-2 mb-4">
              <span className="text-xl">‚öôÔ∏è</span>
              <h3 className="text-lg font-medium text-gray-900">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
            </div>

            <div className="space-y-3">
              <label className="flex items-center gap-3">
                <input
                  type="checkbox"
                  checked={params.includeAnswers}
                  onChange={(e) => handleParamChange('includeAnswers', e.target.checked)}
                  className="h-4 w-4 text-green-600 border-gray-300 rounded focus:ring-green-500"
                />
                <span className="text-sm text-gray-700">–í–∫–ª—é—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—Ç–≤–µ—Ç–∞–º–∏</span>
              </label>

              <label className="flex items-center gap-3">
                <input
                  type="checkbox"
                  checked={params.showNumbers}
                  onChange={(e) => handleParamChange('showNumbers', e.target.checked)}
                  className="h-4 w-4 text-green-600 border-gray-300 rounded focus:ring-green-500"
                />
                <span className="text-sm text-gray-700">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞ –∫–ª–µ—Ç–æ–∫</span>
              </label>
            </div>
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –°–ª–æ–≤–∞ */}
        <div className="space-y-6">
          {/* –ì–æ—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
          <div className="bg-white rounded-lg shadow-sm border p-6">
            <div className="flex items-center gap-2 mb-4">
              <span className="text-xl">üìö</span>
              <h3 className="text-lg font-medium text-gray-900">–ì–æ—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</h3>
            </div>

            <div className="space-y-2">
              {Object.entries(CROSSWORD_PRESET_CATEGORIES).map(([key, category]) => (
                <button
                  key={key}
                  type="button"
                  onClick={() => handleCategorySelect(key as CrosswordPresetCategory)}
                  className={`w-full p-3 text-left rounded-lg border-2 transition-all ${
                    selectedCategory === key
                      ? 'border-green-500 bg-green-50'
                      : 'border-gray-200 bg-white hover:border-gray-300'
                  }`}
                >
                  <div className="flex justify-between items-center">
                    <div>
                      <div className="font-medium">{category.name}</div>
                      <div className="text-sm text-gray-600">
                        {category.words.length} —Å–ª–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º–∏
                      </div>
                    </div>
                    {selectedCategory === key && (
                      <span className="text-green-500 text-lg">‚úì</span>
                    )}
                  </div>
                </button>
              ))}
            </div>
          </div>

          {/* –°–≤–æ–∏ —Å–ª–æ–≤–∞ */}
          <div className="bg-white rounded-lg shadow-sm border p-6">
            <div className="flex items-center gap-2 mb-4">
              <span className="text-xl">‚úèÔ∏è</span>
              <h3 className="text-lg font-medium text-gray-900">–°–≤–æ–∏ —Å–ª–æ–≤–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º–∏</h3>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º–∏:
              </label>
              <textarea
                value={customWords}
                onChange={(e) => handleCustomWordsChange(e.target.value)}
                placeholder={`–∫–æ—Ç - –¥–æ–º–∞—à–Ω–µ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ
—Å–æ–±–∞–∫–∞ - –¥—Ä—É–≥ —á–µ–ª–æ–≤–µ–∫–∞
–¥–æ–º - –º–µ—Å—Ç–æ –≥–¥–µ –º—ã –∂–∏–≤—ë–º

–§–æ—Ä–º–∞—Ç: —Å–ª–æ–≤–æ - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
–ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏`}
                rows={8}
                className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 text-sm ${
                  wordInputError ? 'border-red-300' : 'border-gray-300'
                }`}
              />

              {wordInputError && (
                <div className="mt-2 text-sm text-red-600">
                  {wordInputError}
                </div>
              )}

              <div className="mt-2 text-xs text-gray-500 space-y-1">
                <p>‚Ä¢ –§–æ—Ä–º–∞—Ç: —Å–ª–æ–≤–æ - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å)</p>
                <p>‚Ä¢ –¢–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞, –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞: 3-15 –±—É–∫–≤</p>
                <p>‚Ä¢ –ú–∏–Ω–∏–º—É–º 5 —Å–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–∞</p>
              </div>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
          <div className="bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded-lg p-6">
            <div className="text-center space-y-4">
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <p className="text-gray-600">–°–ª–æ–≤ –≥–æ—Ç–æ–≤–æ</p>
                  <p className="font-semibold text-gray-900">{params.words.length}</p>
                </div>
                <div>
                  <p className="text-gray-600">–†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏</p>
                  <p className="font-semibold text-gray-900">{params.gridSize}</p>
                </div>
              </div>

              <div className="space-y-3">
                <button
                  type="button"
                  onClick={handlePreview}
                  disabled={!canGenerate || previewLoading}
                  className={`w-full py-2 px-4 rounded-lg font-medium text-sm transition-all transform focus:outline-none focus:ring-4 focus:ring-offset-2 ${
                    canGenerate && !previewLoading
                      ? 'bg-gray-100 text-gray-700 border border-gray-300 hover:bg-gray-200 hover:scale-105 focus:ring-gray-300'
                      : 'bg-gray-200 text-gray-400 cursor-not-allowed'
                  }`}
                >
                  {previewLoading ? (
                    <span className="flex items-center justify-center">
                      <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-gray-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é...
                    </span>
                  ) : (
                    <span className="flex items-center justify-center">
                      <span className="mr-2 text-lg">üëÅÔ∏è</span>
                      –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é
                    </span>
                  )}
                </button>

                <button
                  type="button"
                  onClick={handleGenerate}
                  disabled={!canGenerate}
                  className={`w-full py-3 px-6 rounded-lg font-semibold text-base transition-all transform focus:outline-none focus:ring-4 focus:ring-offset-2 ${
                    canGenerate
                      ? 'bg-gradient-to-r from-green-600 to-blue-600 text-white hover:from-green-700 hover:to-blue-700 hover:scale-105 focus:ring-green-300'
                      : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                  }`}
                >
                  {loading ? (
                    <span className="flex items-center justify-center">
                      <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–∞...
                    </span>
                  ) : (
                    <span className="flex items-center justify-center">
                      <span className="mr-2 text-lg">üß©</span>
                      –°–æ–∑–¥–∞—Ç—å –∫—Ä–æ—Å—Å–≤–æ—Ä–¥
                    </span>
                  )}
                </button>
              </div>

              {!canGenerate && !loading && (
                <p className="text-xs text-gray-600">
                  {params.words.length === 0
                    ? 'üí° –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ —Å–ª–æ–≤–∞'
                    : params.words.length < 5
                    ? `üí° –î–æ–±–∞–≤—å—Ç–µ –µ—â—ë ${5 - params.words.length} —Å–ª–æ–≤`
                    : wordInputError
                    ? '‚ùå –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Å–ª–æ–≤–∞—Ö'
                    : 'üí° –ì–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é'
                  }
                </p>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* HTML Preview Modal */}
      {showPreview && previewHtml && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
          <div className="bg-white rounded-lg max-w-6xl w-full max-h-[90vh] overflow-hidden flex flex-col">
            <div className="flex justify-between items-center p-4 border-b">
              <h3 className="text-lg font-semibold">–ü—Ä–µ–≤—å—é –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–∞</h3>
              <button
                onClick={() => setShowPreview(false)}
                className="text-gray-500 hover:text-gray-700 text-2xl"
              >
                √ó
              </button>
            </div>
            <div className="flex-1 overflow-auto p-4">
              <div
                dangerouslySetInnerHTML={{ __html: previewHtml }}
                className="crossword-preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  )
}