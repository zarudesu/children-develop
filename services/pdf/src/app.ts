import express from 'express'
import cors from 'cors'
import { generatePDF, generateHTML } from './services/pdf-generator'
import { validateRequest, validateReadingTextRequest, validateCrosswordRequest } from './utils/validation'
import { GenerateRequest, GeneratorType } from './types'

const app = express()
const PORT = process.env.PORT || 3001

// Middleware
app.use(cors())
app.use(express.json({ limit: '1mb' }))

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} ${req.method} ${req.path}`)
  next()
})

// Health check with Playwright verification
app.get('/health', async (req, res) => {
  try {
    // Quick check - can we import playwright?
    const { chromium } = await import('playwright')
    
    const healthData = {
      status: 'healthy',
      timestamp: new Date().toISOString(),
      version: process.env.npm_package_version || '0.1.0',
      service: 'childdev-pdf',
      environment: process.env.NODE_ENV || 'development',
      playwright: {
        available: true,
        chromiumPath: process.env.PLAYWRIGHT_CHROMIUM_EXECUTABLE_PATH || 'bundled'
      }
    }
    
    res.json(healthData)
  } catch (error) {
    console.error('Health check failed:', error)
    res.status(500).json({
      status: 'unhealthy',
      timestamp: new Date().toISOString(),
      service: 'childdev-pdf',
      error: error instanceof Error ? error.message : 'Unknown error'
    })
  }
})

// Debug endpoint –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ HTML
app.post('/debug-html', async (req, res) => {
  try {
    const requestBody = req.body as GenerateRequest

    console.log('Received debug HTML request:', {
      type: requestBody.type,
      ...(requestBody.type === 'reading-text' && {
        textType: (requestBody.params as any).textType,
        textLength: (requestBody.params as any).inputText?.length,
        fontSize: (requestBody.params as any).fontSize
      })
    })

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    let validation: { success: boolean; error?: string }

    if (requestBody.type === 'reading-text') {
      validation = validateReadingTextRequest(requestBody.params)
    } else if (requestBody.type === 'crossword') {
      validation = validateCrosswordRequest(requestBody.params)
    } else {
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∫ —Ñ–∏–ª–≤–æ—Ä–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      validation = validateRequest(requestBody.params || requestBody)
    }

    if (!validation.success) {
      return res.status(400).json({
        error: 'Validation failed',
        message: validation.error
      })
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML
    const htmlContent = await generateHTML(requestBody)

    // –û—Ç–ø—Ä–∞–≤–∫–∞ HTML
    res.setHeader('Content-Type', 'text/html; charset=utf-8')
    res.setHeader('Cache-Control', 'no-cache')

    res.send(htmlContent)

    console.log(`HTML generated successfully: ${htmlContent.length} characters`)

  } catch (error) {
    console.error('HTML generation error:', error)

    res.status(500).json({
      error: 'Internal server error',
      message: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML'
    })
  }
})

// –ù–æ–≤—ã–π endpoint –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ –≥–æ—Ç–æ–≤–æ–≥–æ HTML –≤ PDF
app.post('/generate-from-html', async (req, res) => {
  try {
    const { html, options = {} } = req.body

    if (!html || typeof html !== 'string') {
      return res.status(400).json({
        error: 'Validation failed',
        message: 'HTML content is required'
      })
    }

    console.log('Received HTML for PDF generation:', {
      htmlLength: html.length,
      options
    })

    // –õ–æ–≥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const mainTextMatch = html.match(/<div class="exercise-text"[^>]*>(.*?)<\/div>/s)
    if (mainTextMatch) {
      console.log('üîç MAIN TEXT IN PDF:', mainTextMatch[1])
    } else {
      console.log('‚ùå Main text not found in HTML')
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    require('fs').writeFileSync('/tmp/debug-full-html.html', html)

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –∏–∑ –≥–æ—Ç–æ–≤–æ–≥–æ HTML
    const { generatePDFFromHTML } = await import('./services/pdf-generator')

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –∏–∑ –≥–æ—Ç–æ–≤–æ–≥–æ HTML
    const pdfBuffer = await generatePDFFromHTML(html, options)

    // –û—Ç–ø—Ä–∞–≤–∫–∞ PDF
    res.setHeader('Content-Type', 'application/pdf')
    res.setHeader('Content-Length', pdfBuffer.length)
    res.setHeader('Cache-Control', 'no-cache')

    res.send(pdfBuffer)

    console.log(`PDF from HTML generated successfully: ${pdfBuffer.length} bytes`)

  } catch (error) {
    console.error('PDF from HTML generation error:', error)

    res.status(500).json({
      error: 'Internal server error',
      message: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –∏–∑ HTML'
    })
  }
})

// –û—Å–Ω–æ–≤–Ω–æ–π endpoint –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
app.post('/generate', async (req, res) => {
  try {
    const requestBody = req.body as GenerateRequest

    console.log('Received generation request:', {
      type: requestBody.type,
      ...(requestBody.type === 'filword' && {
        words: (requestBody.params as any).words?.length,
        gridSize: (requestBody.params as any).gridSize,
        textCase: (requestBody.params as any).textCase
      }),
      ...(requestBody.type === 'reading-text' && {
        textType: (requestBody.params as any).textType,
        textLength: (requestBody.params as any).inputText?.length,
        fontSize: (requestBody.params as any).fontSize
      })
    })

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    let validation: { success: boolean; error?: string }

    if (requestBody.type === 'reading-text') {
      validation = validateReadingTextRequest(requestBody.params)
    } else if (requestBody.type === 'crossword') {
      validation = validateCrosswordRequest(requestBody.params)
    } else {
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∫ —Ñ–∏–ª–≤–æ—Ä–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      validation = validateRequest(requestBody.params || requestBody)
    }

    if (!validation.success) {
      return res.status(400).json({
        error: 'Validation failed',
        message: validation.error
      })
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
    const pdfBuffer = await generatePDF(requestBody)

    // –û—Ç–ø—Ä–∞–≤–∫–∞ PDF
    res.setHeader('Content-Type', 'application/pdf')
    res.setHeader('Content-Length', pdfBuffer.length)
    res.setHeader('Cache-Control', 'no-cache')

    res.send(pdfBuffer)

    console.log(`PDF generated successfully: ${pdfBuffer.length} bytes`)

  } catch (error) {
    console.error('PDF generation error:', error)

    if (error instanceof Error && error.message.includes('placement failed')) {
      return res.status(422).json({
        error: 'Word placement failed',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ –≤ —Å–µ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏.'
      })
    }

    if (error instanceof Error && error.message.includes('text transformation failed')) {
      return res.status(422).json({
        error: 'Text transformation failed',
        message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.'
      })
    }

    res.status(500).json({
      error: 'Internal server error',
      message: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF'
    })
  }
})

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Not found',
    message: `Route ${req.method} ${req.originalUrl} not found`
  })
})

// Error handler
app.use((error: Error, req: express.Request, res: express.Response, next: express.NextFunction) => {
  console.error('Unhandled error:', error)
  res.status(500).json({
    error: 'Internal server error',
    message: error.message
  })
})

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`PDF Service running on port ${PORT}`)
  console.log(`Health check: http://localhost:${PORT}/health`)
})

export default app